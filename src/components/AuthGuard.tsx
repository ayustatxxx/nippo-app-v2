// src/components/AuthGuard.tsx
import React, { useState, useEffect, ReactNode } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { getCurrentUser } from '../firebase/auth';
import { DisplayNameResolver } from '../utils/displayNameResolver';

interface AuthGuardProps {
  children: ReactNode;
}

const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // „Éó„É≠„Éï„Ç£„Éº„É´ÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞
  const checkProfileCompletion = (user: any): boolean => {
    if (!user) return false;
    
    const displayName = DisplayNameResolver.resolve(user);
    
    // ÂøÖÈ†àÈ†ÖÁõÆ„ÉÅ„Çß„ÉÉ„ÇØ - companyË¶Å‰ª∂„ÇíÂâäÈô§
const hasRequiredFields = !!(
  displayName && 
  displayName.trim() !== '' &&
  displayName !== '„É¶„Éº„Ç∂„Éº' &&
  displayName !== 'User' &&
  user?.email
);
    
    console.log('üìã „Éó„É≠„Éï„Ç£„Éº„É´ÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ:', {
      displayName,
      email: user?.email,
      company: user?.profileData?.company,
      isComplete: hasRequiredFields
    });
    
    return hasRequiredFields;
  };

  useEffect(() => {
    const checkAuth = async () => {
      try {
        // FirebaseË™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
       const user = await getCurrentUser();
        
        if (user) {
          console.log('‚úÖ Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº:', user.email);
          
          // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„É¶„Éº„Ç∂„ÉºË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó
          const userDataStr = localStorage.getItem('daily-report-user-data');
          let userData = null;
          
          if (userDataStr) {
            try {
              userData = JSON.parse(userDataStr);
              console.log('üì± „É≠„Éº„Ç´„É´„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÂèñÂæóÊàêÂäü');
            } catch (error) {
              console.warn('‚ö†Ô∏è „É≠„Éº„Ç´„É´„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøËß£Êûê„Ç®„É©„Éº:', error);
            }
          }
          
          // „Éó„É≠„Éï„Ç£„Éº„É´ÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
          const targetUser = userData || user;
          const isProfileComplete = checkProfileCompletion(targetUser);
          
          // „Éó„É≠„Éï„Ç£„Éº„É´Êú™ÂÆå‰∫Ü„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ
          if (!isProfileComplete && location.pathname !== '/profile') {
            console.log('üîÑ „Éó„É≠„Éï„Ç£„Éº„É´Êú™ÂÆå‰∫Ü - Profile„Éö„Éº„Ç∏„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà');
            
            // ÁèæÂú®„ÅÆ„Éë„Çπ„Çí‰øùÂ≠òÔºà„Éó„É≠„Éï„Ç£„Éº„É´ÂÆå‰∫ÜÂæå„Å´Êàª„Çã„Åü„ÇÅÔºâ
            sessionStorage.setItem('redirectAfterProfile', location.pathname + location.search);
            
            // „Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºàrequired=true„Éë„É©„É°„Éº„Çø‰ªò„ÅçÔºâ
            navigate('/profile?required=true', { replace: true });
            setIsLoading(false);
            return;
          }
          
          setIsAuthenticated(true);
          console.log('üéâ Ë™çË®º„Éª„Éó„É≠„Éï„Ç£„Éº„É´Á¢∫Ë™çÂÆå‰∫Ü');
          
        } else {
          console.log('‚ùå Êú™Ë™çË®º - „É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏');
          setIsAuthenticated(false);
          
          // ÁèæÂú®„ÅÆURL„Çí‰øùÂ≠ò
          const currentPath = location.pathname + location.search;
          sessionStorage.setItem('redirectAfterLogin', currentPath);
          
          navigate('/login', { replace: true });
        }
        
      } catch (error) {
        console.error('üö® Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
        setIsAuthenticated(false);
        navigate('/login', { replace: true });
      }
      
      setIsLoading(false);
    };

    // Áü≠„ÅÑÈÅÖÂª∂„ÇíË®≠„Åë„Å¶ÂàùÊúüÂåñ„ÇíÂæÖ„Å§
    const timer = setTimeout(checkAuth, 100);
    
    return () => clearTimeout(timer);
  }, [navigate, location]);

  // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢
  if (isLoading) {
    return (
      <div
        style={{
          minHeight: "100vh",
          background: "linear-gradient(to top, rgb(7, 112, 144), rgb(7, 107, 127), rgb(0, 102, 114))",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <div style={{ color: "#fff", textAlign: "center" }}>
          <div
            style={{
              width: "40px",
              height: "40px",
              border: "4px solid rgba(240, 219, 79, 0.3)",
              borderTop: "4px solid #F0DB4F",
              borderRadius: "50%",
              animation: "spin 1s linear infinite",
              margin: "0 auto 1rem",
            }}
          />
          <p>Ë™çË®ºÁ¢∫Ë™ç‰∏≠...</p>
          <style>
            {`
              @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
              }
            `}
          </style>
        </div>
      </div>
    );
  }

  return isAuthenticated ? <>{children}</> : null;
};

export default AuthGuard;